apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'master'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        def stdout2 = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout2
        }
        if (stdout2.toString().trim() == 'master') {
            return stdout.toString().trim()
        } else {
            return stdout.toString().trim() + '(' + stdout2.toString().trim() + ')'
        }
    }
    catch (ignored) {
	    return 'invalid'
    }
}

// add salt for verifying data
def apikeyProperties = new Properties()
def apikeyPropertiesFile = rootProject.file("apikey.properties")
if (apikeyPropertiesFile.exists()) {
    apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
} else {
    apikeyProperties['SECRET_SALT'] = "\"\""
}

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.2'

    defaultConfig {
        applicationId "io.crayfis.android"
        minSdkVersion 23
        targetSdkVersion 29
        renderscriptTargetApi 23
        versionCode getVersionCode()
        versionName getVersionName()

        buildConfigField("String", "SECRET_SALT", apikeyProperties['SECRET_SALT'])
    }

    // make sure salt is included in release variants
    android.applicationVariants.all {  variant ->
        if ( variant.buildType.name == "release"){
            variant.getAssembleProvider().configure() {
                it.doLast() {
                    if (!rootProject.file("apikey.properties").exists()) {
                        throw new GradleException("apikey.properties file needed for release build")
                    }
                }
            }
        }
    }


    buildTypes {
        release {
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.legacy:legacy-support-v13:1.0.0'
    api 'androidx.annotation:annotation:1.1.0'
    api 'com.google.protobuf:protobuf-java:3.14.0'
    api 'com.jjoe64:graphview:4.2.1'
    api 'com.google.code.gson:gson:2.8.5'
    api 'com.google.android.gms:play-services-location:17.1.0'
    api project(':libraries:opencv')
    implementation 'com.google.firebase:firebase-crashlytics:17.3.1'
    implementation 'com.google.firebase:firebase-analytics:18.0.2'
}

